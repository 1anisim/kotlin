{
  "9": {
    "pos": {
      "10": [
        {
          "specVersion": "1.4-rfc+0.3-603",
          "casesNumber": 6,
          "description": "smartcast absence from operator assignment",
          "path": "compiler/tests-spec/testData/diagnostics/linked/type-inference/smart-casts/smart-cast-types/p-9/pos/10.2.kt",
          "unexpectedBehaviour": false,
          "linkType": "main",
          "helpers": "checkType"
        },
        {
          "specVersion": "1.4-rfc+0.3-603",
          "casesNumber": 8,
          "description": "nullable variable smartcast from direct assignment of try-catch expression with enums",
          "path": "compiler/tests-spec/testData/diagnostics/linked/type-inference/smart-casts/smart-cast-types/p-9/pos/10.1.kt",
          "unexpectedBehaviour": true,
          "linkType": "main",
          "helpers": "checkType"
        },
        {
          "specVersion": "1.4-rfc+0.3-603",
          "casesNumber": 1,
          "description": "notNull smartcast \u0026 direct assignment smartcast",
          "path": "compiler/tests-spec/testData/diagnostics/linked/type-inference/smart-casts/smart-cast-types/p-9/pos/1.1.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary",
          "helpers": "checkType"
        }
      ],
      "1": [
        {
          "specVersion": "1.4-rfc+0.3-603",
          "casesNumber": 1,
          "description": "notNull smartcast \u0026 direct assignment smartcast",
          "path": "compiler/tests-spec/testData/diagnostics/linked/type-inference/smart-casts/smart-cast-types/p-9/pos/1.1.kt",
          "unexpectedBehaviour": false,
          "linkType": "main",
          "helpers": "checkType"
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Branch false bypass",
          "path": "compiler/testData/diagnostics/tests/when/BranchFalseBypass.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary"
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Exhaustive with nullability check before",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheckBefore.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary"
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Exhaustive with nullability check else",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheckElse.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary"
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Branch false bypass else",
          "path": "compiler/testData/diagnostics/tests/when/BranchFalseBypassElse.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary"
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Exhaustive with nullability check",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheck.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary"
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Exhaustive with nullability check boolean",
          "path": "compiler/testData/diagnostics/tests/when/ExhaustiveWithNullabilityCheckBoolean.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary"
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Kt10809",
          "path": "compiler/testData/diagnostics/tests/when/kt10809.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary"
        }
      ],
      "7": [
        {
          "specVersion": "1.4-rfc+0.3-603",
          "casesNumber": 3,
          "description": "If the type of e is non-nullable, not-null assertion expression e!! has no effect.",
          "path": "compiler/tests-spec/testData/diagnostics/linked/expressions/not-null-assertion-expression/p-2/pos/1.2.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary",
          "helpers": "checkType"
        },
        {
          "specVersion": "1.4-rfc+0.3-603",
          "casesNumber": 3,
          "description": "If the type of e is non-nullable, not-null assertion expression e!! has no effect.",
          "path": "compiler/tests-spec/testData/diagnostics/linked/expressions/not-null-assertion-expression/p-2/pos/1.3.kt",
          "unexpectedBehaviour": true,
          "linkType": "primary",
          "helpers": "checkType"
        },
        {
          "specVersion": "1.4-rfc+0.3-603",
          "casesNumber": 3,
          "description": "The type of non-null assertion expression is the non-nullable variant of the type of e",
          "path": "compiler/tests-spec/testData/diagnostics/linked/expressions/not-null-assertion-expressions/p-3/pos/1.2.kt",
          "unexpectedBehaviour": true,
          "linkType": "primary",
          "helpers": "checkType"
        },
        {
          "specVersion": "1.4-rfc+0.3-603",
          "casesNumber": 3,
          "description": "The type of non-null assertion expression is the non-nullable variant of the type of e",
          "path": "compiler/tests-spec/testData/diagnostics/linked/expressions/not-null-assertion-expressions/p-3/pos/1.1.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary",
          "helpers": "checkType"
        }
      ],
      "9": [
        {
          "specVersion": "1.4-rfc+0.3-603",
          "casesNumber": 3,
          "description": "If the type of e is non-nullable, not-null assertion expression e!! has no effect.",
          "path": "compiler/tests-spec/testData/diagnostics/linked/expressions/not-null-assertion-expression/p-2/pos/1.2.kt",
          "unexpectedBehaviour": false,
          "linkType": "secondary",
          "helpers": "checkType"
        },
        {
          "specVersion": "1.4-rfc+0.3-603",
          "casesNumber": 3,
          "description": "The type of non-null assertion expression is the non-nullable variant of the type of e",
          "path": "compiler/tests-spec/testData/diagnostics/linked/expressions/not-null-assertion-expressions/p-3/pos/1.1.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary",
          "helpers": "checkType"
        }
      ],
      "8": [
        {
          "specVersion": "1.4-rfc+0.3-603",
          "casesNumber": 3,
          "description": "If the type of e is non-nullable, not-null assertion expression e!! has no effect.",
          "path": "compiler/tests-spec/testData/diagnostics/linked/expressions/not-null-assertion-expression/p-2/pos/1.3.kt",
          "unexpectedBehaviour": true,
          "linkType": "secondary",
          "helpers": "checkType"
        },
        {
          "specVersion": "1.4-rfc+0.3-603",
          "casesNumber": 3,
          "description": "The type of non-null assertion expression is the non-nullable variant of the type of e",
          "path": "compiler/tests-spec/testData/diagnostics/linked/expressions/not-null-assertion-expressions/p-3/pos/1.2.kt",
          "unexpectedBehaviour": true,
          "linkType": "primary",
          "helpers": "checkType"
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Branch false bypass",
          "path": "compiler/testData/diagnostics/tests/when/BranchFalseBypass.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary"
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Branch false bypass else",
          "path": "compiler/testData/diagnostics/tests/when/BranchFalseBypassElse.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary"
        }
      ]
    },
    "neg": {
      "1": [
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "When type disjunctions",
          "path": "compiler/testData/diagnostics/tests/when/WhenTypeDisjunctions.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary"
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Branch bypass val",
          "path": "compiler/testData/diagnostics/tests/when/BranchBypassVal.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary"
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Non exhaustive warning for sealed class",
          "path": "compiler/testData/diagnostics/tests/when/NonExhaustiveWarningForSealedClass.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary"
        },
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Branch bypass var",
          "path": "compiler/testData/diagnostics/tests/when/BranchBypassVar.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary"
        },
        {
          "specVersion": "0.1-152",
          "casesNumber": 0,
          "description": "Non exhaustive with nullability check",
          "path": "compiler/testData/diagnostics/tests/when/NonExhaustiveWithNullabilityCheck.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary"
        }
      ],
      "6": [
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Branch bypass val",
          "path": "compiler/testData/diagnostics/tests/when/BranchBypassVal.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary"
        }
      ],
      "8": [
        {
          "specVersion": "0.1-313",
          "casesNumber": 0,
          "description": "Branch bypass var",
          "path": "compiler/testData/diagnostics/tests/when/BranchBypassVar.kt",
          "unexpectedBehaviour": false,
          "linkType": "primary"
        }
      ]
    }
  }
}